#!/usr/bin/env python
# encoding: utf-8

import sys
import os
import csv
import string

def main():
	d = 4

	width = 600
	rowHeight = 50
	rowSpacer = 5
	minWidth = 4

	labels = { }
	timevals = { }
	startTime = -1
	endTime = -1
	totalTime = 0

	#possibleColors = ['red', 'green', 'blue', 'yellow', 'orange']
	colors = 'red green blue cyan magenta yellow black gray darkgray lightgray brown lime olive orange pink purple teal violet'
	possibleColors = colors.split(' ')
	myColorMap = {}
	#skipTypes
	path = 'swimFile4RedNy2/'
	
	for di in range(0,d):
		with open(path +str(di)+'.0', 'rb') as tf:
			labels[di] = []
			timevals[di] = []
			for line in tf:
				pieces = line.split(':')
				labels[di].append(pieces[0].strip())
				timevals[di].append(int(pieces[1].strip()))
		if startTime < 0 or startTime > timevals[di][0]:
			startTime = timevals[di][0]
		if endTime < 0 or endTime < timevals[di][len(timevals[di])-1]:
			startTime = timevals[di][0]

	totalTime = endTime - startTime


	# print out latex/tikz preamble here
	print "documentclass{article}"
	print "\\usepackage{tikz}"
	print "\\usetikzlibrary{arrows,positioning}"
	print "\\begin{document}"
	print "\\begin{figure}"
	print "\\centering"
	print "\\begin{tikzpicture}[node distance=1cm, auto]"

	for di in range(0,d):
		dlabel = labels[di]
		dtimes = timevals[di]
		#print labels[di]
		#print dlabel

		rectTop = di * (rowHeight + rowSpacer)
		rectBottom = rectTop + rowHeight

		i = 0
		while True:
			if i-1 > len(dtimes):
				break

			labelkey = dlabel[i].replace('Begin','').replace('End','').strip()
			labelkey2 = dlabel[i+1].replace('Begin','').replace('End','').strip()

			if labelkey == labelkey2 and 'Begin' in dlabel[i] and 'End' in dlabel[i+1]:
				rectStart = 1.0 * (dtimes[i] - startTime)/totalTime * width
				rectEnd =  1.0 * (dtimes[i+1] - startTime)/totalTime * width 

				if labelkey in myColorMap:
					curColor = myColorMap[labelkey]
				else:
					print possibleColors
					curColor = possibleColors.pop()
					myColorMap[labelkey] = curColor

				#if rectEnd-rectStart > minWidth:
				print '\\filldraw[fill=' + str(curColor) + ',draw=black,opacity=0.2] ('+str(rectStart)+','+str(rectTop)+') rectangle ('+str(rectEnd)+','+str(rectBottom)+');'
					# print rectangle with rectTop, rectBottom, rectStart, rectEnd
					# color should be curColor

				# Note this does not do aggregation of adjacent blocks or handle multiple layers of blocks

				i = i + 2
				continue
			else:
				i = i+1
				continue
		


		print "\\end{tikzpicture}"
		print "\\medskip"
		print "\\caption{Structure of the Market} "
		print "\\end{figure}"
		print "\\end{document}"



				
	# print out latex/tikz closing here

if __name__ == '__main__':
	main()




